Final report

Summary:
The project is to implement a rhythm game. The game has three tracks and there will be dots falling
from top to bottom along the tracks. The game will take three input keys from PS/2 keyboard, each 
corresponds to each track. By pressing a key when the dots pass a certain line, if the input is correct,
the dots will be eliminated and produce correspoding sound. Moreover, a score of 5 will be added to the 
final scoreboard. If the input is incorrect or the dots are not eliminated after they reach the bottom 
of the screen, the socre will be deducted. The game speed is increased or decreased based on corrrectness 
of user's input. 
When the game is not been playing, the LEDs are turned on and the audio codec produces sound based on
inputs from PS/2 keyboard. When the game is been playing, the LEDs are turned off and the audio codec
only produces sound on the valid inputs.


Devices used:
*Push button(Interrupt): Start/stop the game
*Timer(Interrupt): Update game state
*7Segs: Output scoreboard in decimal.
*PS/2 Keyboard: Take user input
*VGA: Graphics
*Audio Codec: Sound output
*LEDs: Indicate the game is on/off 


Difficulties:
There were problems with handling interrupts. Originally, I used timer interrupt with dynamic quantum
(the period of timer interrupt keeps changing over time). PS/2 keyboard interrupt was also used to 
respond to user's input. To show interaction between user and the game, PS/2 keyboard interrupt had 
higher priority than the timer interrupt. Problem of this was that if there were too many user inputs, 
then timer interrupt got delayed and therefore updating graphical frame was delayed too. This caused
bad interaction between user and the game.

To solve the problem, I decided not to use the keyboard interrupt. However, It bore another problem.
Since the game has dynamic game speed which is period of timer interrupt, the timer interrupt period 
could be too large to read correct user input. For example, if user presses two different keys at 
different time but within one timer interrupt period, then only the first user input is responded by 
the game. The second user input will be proceeded in the next timer interrupt. This is also bad 
interaction as user input and the game are not synchronized.

Solution:
Use only one timer interrupt with fixed quantum. The quantum is short enough to read correct user input.
However, don't update the entire graphical frame in every timer interrupt (i.e., only remove corresponding 
dots according to the user input in every timer interrupt). Instead, having flag_counter and decrement 
this every timer interrupt; when it drops to 0, finally move all dots one slot down. Set the flag_counter 
according to the correctness of user input in order to have dynamic speed.